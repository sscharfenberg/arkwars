doctype html
html(lang=(session.locale))
    head
        meta(charset="utf-8")
        title= `${title} | ${cfg.app.title}`
        meta(name="viewport" content="width=device-width, initial-scale=1")
        //- head block for seperate stylesheets (admin)
        link(
            rel="stylesheet",
            href=(h.hashedAsset("styles.css"))
        )
        link(
            rel="stylesheet",
            href=(h.hashedAsset("common.css"))
        )
        block head

body(data-user=(user ? 1 : 0))

    header.aw-header

        .aw-header__menu
            button.aw-header__menu-btn#appDrawerBtn(
                aria-label=(h.__("APP.HEADER.LABEL_MAINMENU")),
                class=(user && user.settings.drawerOpen ? "aw-header__menu-btn--open" : "")
            )
                span
                span
                span

        .aw-header__title
            a.aw-header__title-link(href="/")
                != h.image("logo.svg")
                span= h.appName

        ul.aw-header__actions

            //- admin link
            if user && user.admin
                li.aw-header__action
                    a.aw-header__link(href="/admin")
                        != h.icon("key")
                        span= h.__("APP.HEADER.LABEL_ADMIN")

            //- languages
            li.aw-header__action
                a.aw-header__link.aw-header__submenu-trigger(href="", aria-label=(h.__("APP.HEADER.LABEL_CHANGELANGUAGE")))
                    != h.icon("language")
                    span.keep #{session && session.locale ? session.locale : ""}
                ul.aw-header__submenu.aw-header__submenu--left.aw-header__submenu--medium(aria-hidden="true")
                    each locale in cfg.app.locales
                        li.aw-header__submenu-item
                            a.aw-header__submenu-item-link(
                                href=(`/language/${locale.name}`),
                                class=(session && session.locale && session.locale === locale.name ? "aw-header__submenu-item-link--active" : "")
                            )
                                != h.image(`flags/${locale.name}.svg`)
                                != locale.native


            //- players. we show games, but we really mean players
            if user && user.players && user.players.length
                li.aw-header__action
                    a.aw-header__link.aw-header__submenu-trigger(href="", aria-label=(h.__("APP.HEADER.LABEL_CHANGEGAME")))
                        != h.icon("games")
                        span.keep= user.selectedPlayer ? "g" + user.selectedPlayer.game.number : h.__("APP.HEADER.LABEL_GAME")
                    ul.aw-header__submenu.aw-header__submenu--left(aria-hidden="true")
                        each player in user.players
                            if player.game.active
                                li.aw-header__submenu-item
                                    a.aw-header__submenu-item-link(
                                        href=`/game/${player.game.number}/select`,
                                        data-gameid=(player.game.number),
                                        class=(user.selectedPlayer && user.selectedPlayer.game.id === player.game.id ? "aw-header__submenu-item-link--active" : "")
                                    )= "g" + player.game.number


            //- links for guests: login, register
            if !user
                li.aw-header__action
                    a.aw-header__link(href="/auth/login")
                        != h.icon("key")
                        span= h.__("APP.HEADER.LABEL_LOGIN")
                li.aw-header__action
                    a.aw-header__link(href="/auth/register")
                        != h.icon("lightbulb")
                        span= h.__("APP.HEADER.LABEL_REGISTER")

            //- links for users: profile, logout
            if user
                li.aw-header__action
                    a.aw-header__link.aw-header__submenu-trigger.aw-header__link--circle(href="/dashboard")
                        != h.getAvatar(user.avatar, "header")
                    ul.aw-header__submenu.aw-header__submenu--right.aw-header__submenu--medium(aria-hidden="true")
                        li.aw-header__submenu-item
                            a.aw-header__submenu-item-link(href="/dashboard")= h.__("APP.HEADER.LABEL_HOME")
                li.aw-header__action
                    a.aw-header__link(href="/auth/logout")
                        != h.icon("power")
                        span= h.__("APP.HEADER.LABEL_LOGOUT")

        //- turn data for mobile
        if user && user.players && user.players.length && user.selectedPlayer
            .aw-header__turn
                .aw-turn
                    != h.icon("turn", ["turn"])
                    .aw-turn__value= user.selectedPlayer.game.turn
                .aw-header__server-time
                    time(
                        datetime=(h.moment().toISOString()),
                        data-server-time
                    )= h.moment().format("LT")
                .aw-header__turn-next-progress
                    .aw-progress.aw-progress-turn(
                        data-max=(user.selectedPlayer.game.turnDuration),
                        data-value=(user.selectedPlayer.game.turnMinutesPassed)
                    )!= h.progressbar(user.selectedPlayer.game.turnDuration, user.selectedPlayer.game.turnMinutesPassed, user.selectedPlayer.game.active)
                .aw-header__turn-next-time
                    time(
                        datetime=(h.moment(user.selectedPlayer.game.turnDue).toISOString()),
                        data-time-next-turn
                    )= h.moment(user.selectedPlayer.game.turnDue).format("LT")


    .aw-main-wrapper

        //- game drawer
        section.aw-drawer#appDrawer(
            aria-hidden=(user && user.settings.drawerOpen ? "false" : "true"),
            class=(user && user.settings.drawerOpen ? "aw-drawer--open" : "")
        )

            ul.aw-drawer__list

                //- time data
                li.aw-drawer__list-item.aw-drawer__list-item--info
                    .aw-drawer__info
                        .aw-drawer__info-label= h.__("APP.HEADER.LABEL_SERVERTIME")
                        .aw-drawer__info-value
                            time(datetime=(h.moment().toISOString()), data-server-time)= h.moment().format("LT")
                    .aw-drawer__info.aw-drawer__info--darker
                        .aw-drawer__info-label= h.__("APP.HEADER.LABEL_LOCALTIME")
                        .aw-drawer__info-value
                            time(datetime="", data-my-time) 00:00

                //- turn data
                if user && user.players && user.players.length && user.selectedPlayer
                    li.aw-drawer__list-item.aw-drawer__list-item--turn
                        .aw-drawer__turn
                            .aw-drawer__turn-current
                                .aw-drawer__turn-current-label= h.__("GAME.LABEL_CURRENTTURN")
                                .aw-turn
                                    != h.icon("turn", ["turn"])
                                    .aw-turn__value= user.selectedPlayer.game.turn
                            .aw-drawer__turn-next
                                .aw-drawer__turn-next-label= h.__("GAME.LABEL_NEXTTURN")
                                .aw-drawer__turn-next-progress
                                    .aw-progress.aw-progress-turn(
                                        data-max=(user.selectedPlayer.game.turnDuration),
                                        data-value=(user.selectedPlayer.game.turnMinutesPassed)
                                    )!= h.progressbar(user.selectedPlayer.game.turnDuration, user.selectedPlayer.game.turnMinutesPassed, user.selectedPlayer.game.active)
                                .aw-drawer__turn-next-time
                                    time(
                                        datetime=(h.moment(user.selectedPlayer.game.turnDue).toISOString()),
                                        data-time-next-turn
                                    )= h.moment(user.selectedPlayer.game.turnDue).format("LT")


                //- game links
                if user && user.players && user.players.length && user.selectedPlayer
                    li.aw-drawer__list-item
                        a.aw-drawer__link(
                            href="/game/1/empire",
                            class=(currentPath.split("/").pop() === "empire" ? "aw-drawer__link--active" : "")
                        )
                            != h.icon("empire", ["small"])
                            != h.__("GAME.EMPIRE.LABEL")
                    li.aw-drawer__list-item
                        a.aw-drawer__link(
                            href="/game/1/fleets",
                            class=(currentPath.split("/").pop() === "fleets" ? "aw-drawer__link--active" : "")
                        )
                            != h.icon("fleets", ["small"])
                            != h.__("GAME.FLEETS.LABEL")
                    li.aw-drawer__list-item
                        a.aw-drawer__link(
                            href="/game/1/shipyards",
                            class=(currentPath.split("/").pop() === "shipyards" ? "aw-drawer__link--active" : "")
                        )
                            != h.icon("shipyard", ["small"])
                            != h.__("GAME.SHIPYARDS.LABEL")
                    li.aw-drawer__list-item
                        a.aw-drawer__link(
                            href="/game/1/research",
                            class=(currentPath.split("/").pop() === "research" ? "aw-drawer__link--active" : "")
                        )
                            != h.icon("research", ["small"])
                            != h.__("GAME.RESEARCH.LABEL")
                    li.aw-drawer__list-item
                        a.aw-drawer__link(
                            href="/game/1/starchart",
                            class=(currentPath.split("/").pop() === "starchart" ? "aw-drawer__link--active" : "")
                        )
                            != h.icon("starchart", ["small"])
                            != h.__("GAME.STARCHART.LABEL")
                    li.aw-drawer__list-item
                        a.aw-drawer__link(
                            href="/game/1/galnet",
                            class=(currentPath.split("/").pop() === "galnet" ? "aw-drawer__link--active" : "")
                        )
                            != h.icon("galnet", ["small"])
                            != h.__("GAME.GALNET.LABEL")

                li.aw-drawer__list-item.aw-drawer__list-item--spacer
                li.aw-drawer__list-item
                    a.aw-drawer__link(href="/help/") Help

        section#content.aw-content

            //- flash messages first.
            block messages
                if locals.flashes
                    - const categories = Object.keys(locals.flashes)
                    each category in categories
                        each message in flashes[category]
                            .aw-flash
                                .aw-flash__message(class=`aw-flash__message--${category}`)
                                    p.aw-flash__text!= message
                                    button.aw-btn.aw-btn--close.aw-flash__remove &times;

            //- main content block that is defined in the templates that extend this layout template.
            block content

            //- tmp dump data
            if session
                h3 Session Data
                pre= h.dump(session)
            if user
                h3 User Data
                pre= h.dump(user)

            if user && user.players
                h3 Player Data
                pre= h.dump(user.players)

            //- v.short footer
            footer.aw-footer
                address.aw-footer__meta
                    | handcrafted with
                    span ❤
                    | by Sven Scharfenberg
                ul.aw-footer__list
                    li.aw-footer__list-item
                        a.aw-footer__link(href="/privacy-policy") Privacy Policy
                    li.aw-footer__list-item
                        a.aw-footer__link(href="/imprint") Imprint
                    li.aw-footer__list-item
                        a#footerJumpTop.aw-footer__link.aw-footer__link--icon(href="#main")
                            != h.icon("arrow_up")


    //- app scripts, used everywhere
    script(
        src=(h.hashedAsset("webpack-dev-server.js")),
        defer,
        nonce=(nonce)
    )
    script(
        src=(h.hashedAsset("vendor.js")),
        defer,
        nonce=(nonce)
    )
    script(
        src=(h.hashedAsset("common.js")),
        defer,
        nonce=(nonce)
    )
    script(
        src=(h.hashedAsset("app.js")),
        defer,
        nonce=(nonce)
    )
    //- scripts block, additional scripts from templates.
    block scripts

